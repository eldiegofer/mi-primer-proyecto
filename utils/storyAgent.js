function generateStoryPrompt(params) {
    return `Primero, genera un t√≠tulo llamativo y optimizado para SEO que:
- Sea atractivo y genere curiosidad
- Incluya palabras clave relevantes al g√©nero (${params.genero})
- Tenga entre 5-10 palabras
- Refleje el tono (${params.tono}) de la historia
- Sea memorable y f√°cil de compartir
- No revele demasiado de la trama

Despu√©s, genera una historia ${params.tipo === 'corta' ? 'autoconclusiva' : 'por cap√≠tulos'} de aproximadamente 3000-4000 palabras.

G√©nero: ${params.genero}
Protagonista: ${params.protagonista}
Tono emocional: ${params.tono}
Tipo de final: ${params.final}
${params.detalles ? `Detalles adicionales: ${params.detalles}` : ''}

Instrucciones espec√≠ficas:
- Escribe la historia de forma fluida y continua
- No uses marcadores como "Introducci√≥n", "Escena 1", etc.
- Mant√©n una narrativa natural que fluya de una escena a otra
- Usa p√°rrafos bien estructurados para separar las diferentes partes
- Incluye transiciones suaves entre escenas
- La historia debe tener un arco narrativo completo
- Evita cualquier tipo de encabezado o marcador de secci√≥n

La historia debe mantener:
- Un inicio que enganche al lector
- Desarrollo gradual del conflicto
- Puntos de tensi√≥n creciente
- Un cl√≠max impactante
- ${params.tipo === 'corta' ? 'Una resoluci√≥n satisfactoria' : 'Un final que invite a continuar'}

IMPORTANTE: Devuelve primero el t√≠tulo en una l√≠nea, seguido de dos saltos de l√≠nea, y luego la historia completa.`;
}

async function generateStory(params) {
    try {
        const systemPrompt = `Eres un experto narrador y escritor creativo especializado en crear historias cautivadoras para formato audio. 
IMPORTANTE: Genera un t√≠tulo SEO atractivo y despu√©s la historia completa sin marcadores de secci√≥n. La narraci√≥n debe fluir naturalmente de principio a fin.`;
        const userPrompt = generateStoryPrompt(params);
        
        const response = await invokeAIAgent(systemPrompt, userPrompt);
        return response;
    } catch (error) {
        console.error('Error generating story:', error);
        throw new Error('No se pudo generar la historia. Por favor, intenta nuevamente.');
    }
}

function generateStoryboardPrompt(story, preferences) {
    return `Como StoryVisual Cuentrix, crea un gui√≥n visual detallado para esta historia.

Tipo de visualizaci√≥n: ${preferences.type === 'full' ? 'escena por escena' : 'momentos clave'}
Estilo visual: ${preferences.style}
Efectos de sonido: ${preferences.soundEffects ? 'S√≠' : 'No'}
Preferencias adicionales: ${preferences.visualPreferences}

Para cada escena, proporciona:
üéûÔ∏è ESCENA [n√∫mero]: [nombre descriptivo]
üîπ Plano: (General/Medio/Primer plano/Detalle)
üîπ Descripci√≥n visual: (ambiente, composici√≥n)
üîπ Elementos clave: (personajes, objetos importantes)
üîπ Emoci√≥n transmitida: (sentimiento principal)
üîπ Efectos sugeridos: (efectos visuales, sonido)
üé® Prompt para IA: (descripci√≥n t√©cnica en ingl√©s)

Historia:
${story}

IMPORTANTE: 
- Divide la historia en al menos 5 escenas distintas
- Cada escena debe tener todos los elementos solicitados
- Los prompts para IA deben ser detallados y en ingl√©s
- Aseg√∫rate que cada escena capture un momento significativo de la historia`;
}

async function generateStoryboard(story, preferences) {
    try {
        const systemPrompt = "Eres StoryVisual Cuentrix, un director creativo experto en crear guiones visuales detallados.";
        const userPrompt = generateStoryboardPrompt(story, preferences);
        
        const response = await invokeAIAgent(systemPrompt, userPrompt);
        return response;
    } catch (error) {
        console.error('Error generating storyboard:', error);
        throw new Error('No se pudo generar el gui√≥n visual. Por favor, intenta nuevamente.');
    }
}
